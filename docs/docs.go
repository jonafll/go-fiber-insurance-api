// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/tariff": {
            "post": {
                "description": "Start tariffing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tariffing"
                ],
                "summary": "Start tariffing",
                "parameters": [
                    {
                        "description": "Tariff",
                        "name": "tariff",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Tariff"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.TariffAmount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.httpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.httpError"
                        }
                    }
                }
            }
        },
        "/vehicles": {
            "get": {
                "description": "Search vehicle.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vehicle"
                ],
                "summary": "Search vehicle",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Manufacturer",
                        "name": "manufacturer",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Model",
                        "name": "model",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Vehicle"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.httpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.httpError"
                        }
                    }
                }
            }
        },
        "/vehicles/{id}": {
            "get": {
                "description": "Search vehicle with id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vehicle"
                ],
                "summary": "Search vehicle with id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Vehicle"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.httpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.httpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Address": {
            "type": "object",
            "required": [
                "city",
                "country",
                "postalCode",
                "street"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "integer"
                },
                "street": {
                    "type": "string"
                }
            }
        },
        "model.Person": {
            "type": "object",
            "required": [
                "address",
                "dateOfBirth",
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "model.Tariff": {
            "type": "object",
            "required": [
                "coverage",
                "insuranceStart",
                "person",
                "vehicle"
            ],
            "properties": {
                "coverage": {
                    "type": "string",
                    "enum": [
                        "liability",
                        "comprehensive",
                        "partial"
                    ]
                },
                "insuranceStart": {
                    "type": "string"
                },
                "person": {
                    "$ref": "#/definitions/model.Person"
                },
                "vehicle": {
                    "$ref": "#/definitions/model.Vehicle"
                }
            }
        },
        "model.TariffAmount": {
            "type": "object",
            "required": [
                "currency"
            ],
            "properties": {
                "comprehensive": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "liability": {
                    "type": "number"
                },
                "partial": {
                    "type": "number"
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "model.Vehicle": {
            "type": "object",
            "required": [
                "id",
                "manufacturer",
                "model",
                "vin"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "manufacturer": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "performance": {
                    "type": "integer",
                    "maximum": 999
                },
                "vin": {
                    "type": "string",
                    "maxLength": 17,
                    "minLength": 17
                }
            }
        },
        "utils.httpError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Car Insurance API",
	Description:      "Car Insurance API with Go and Fiber.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
